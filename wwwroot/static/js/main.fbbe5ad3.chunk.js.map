{"version":3,"sources":["Comp1.js","DataGrid.js","DataFilter.js","Editor.js","Pagination.js","Finder.js","ext/Dogovors.js","App.js","serviceWorker.js","index.js"],"names":["Fin","items","text","this","push","f1","f2","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","offset","mixins","toolbar","title","fixheight","height","overflow","Comp1","props","visible","classes","hidden","className","AppBar","position","Toolbar","Tooltip","IconButton","edge","color","aria-label","onClick","mainObj","showMenu","Typography","variant","Comp","container","DataGrid","par","initc","openMap","get","id","data","curRow","useState","current","setCurrent","Table","size","TableHead","TableRow","columns","map","column","TableCell","key","FieldName","align","DisplayFormat","indexOf","style","fontSize","maxWidth","FieldCaption","TableBody","rows","row","index","hover","selected","event","handleClick","value","d","f","length","RegExp","res","match","n","Number","toString","toFixed","replace","substr","dateformat","DataFilter","action","setAction","TextField","label","width","FindString","onChange","target","textChange","widht","SortOrder","Select","native","Sort","rang","i","sortChange","marginLeft","Editor","mode","descr","save","closeEditor","ReferEdit","Editors","Pagination","count","TotalTab","n_total","page","Math","min","onChangePage","disabled","max","ceil","Finder","load","setLoad","stateDrawer","setStateDrawer","setMode","IdDeclare","params","useEffect","getData","OpenMapData","OpenMapId","a","url","baseUrl","bd","FormData","append","mid","SQLParams","JSON","stringify","TextParams","fetch","method","prodaction","cache","credentials","body","response","json","Error","alert","Descr","updateTab","Fcols","MainTab","open","edit","add","Fragment","Drawer","anchor","onClose","p","EditProc","renderEditBut","then","blob","window","URL","createObjectURL","document","createElement","href","setAttribute","click","csv","KeyValue","val","KeyF","jsstr","obj","Control","Params","parse","newid","addform","openDetail","renderAddBut","addinit","renderTab","renderFilter","renderEditor","Dogovors","r","c","agr_key","fileUrl","treeJson","drawerHeader","display","alignItems","padding","justifyContent","menuMap","Map","createMenuMap","tree","node","children","set","attributes","startObj","openIDs","App","prefersDarkMode","useMediaQuery","React","useMemo","createMuiTheme","palette","type","loading","setLoading","Setcurrent","control","link1","Conrol","getForm","clear","getTree","ThemeProvider","CssBaseline","TreeView","defaultCollapseIcon","defaultExpandIcon","onNodeSelect","nodeIds","renderTree","nodes","TreeItem","nodeId","Array","isArray","Cm","rendItem","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fbbe5ad3.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nimport { baseUrl, openMap, mainObj } from './App';\r\n\r\nclass Fin {\r\n  items = [];\r\n  text = \"\";\r\n  updateTab() {\r\n    this.items.push(\"oh\")\r\n  }\r\n}\r\n\r\nlet f1 = new Fin();\r\nf1.items = [\"aa\", \"bb\", \"dd\"];\r\nf1.text = \"Hello\"\r\n\r\nlet f2 = new Fin();\r\nf2.items = [\"uu\", \"zz\", \"xx\"];\r\nf2.text = \"привет\"\r\n\r\nconst MainList = [f1, f2];\r\n\r\n\r\nconst listcm = [Comp, Comp1, <div></div>];\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  offset: theme.mixins.toolbar,\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  fixheight: {\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n}));\r\n\r\nfunction GetComp(props) {\r\n  const classes = useStyles();\r\n  const current = props.component;\r\n  const Res = listcm[current];\r\n  //const [id, SetId] = useState(props.id);\r\n  let id = props.id;\r\n  return <Res id={id} />;\r\n}\r\n\r\nfunction Comp1(props) {\r\n  const visible = props.visible;\r\n  const classes = useStyles();\r\n  return <div\r\n    hidden={!visible}\r\n  >\r\n    <div className={classes.root}>\r\n      <AppBar position=\"fixed\">\r\n        <Toolbar>\r\n          <Tooltip title=\"Меню\">\r\n            <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={() => { mainObj.showMenu(); }}>\r\n              <MenuIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Карточки рейса\r\n              </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <div className={classes.offset} />\r\n    </div>\r\n  </div>\r\n}\r\n\r\nfunction Comp(props) {\r\n\r\n\r\n  /*\r\n  if (MainList.length == 0)\r\n  {\r\n      let f2 = new Fin();\r\n      f2.items = [\"uu1\", \"zz1\", \"xx1\"];\r\n      f2.text = \"привет\";\r\n      MainList.push(f2);\r\n  };\r\n  */\r\n  const classes = useStyles();\r\n  const { visible } = props;\r\n  const p = MainList[0];\r\n\r\n  //const p = new Fin();\r\n  //p.items = [\"aa\", \"bb\", \"cc\"];\r\n\r\n  const [items, setItems] = useState(p.items);\r\n  const [txt, setTxt] = useState(p.text);\r\n\r\n\r\n\r\n  function handleChange(event) {\r\n    let a = event.target.value;\r\n    setTxt(a);\r\n    p.text = a;\r\n  }\r\n\r\n  function updateTab() {\r\n    p.updateTab();\r\n    let a = [];\r\n    p.items.forEach(element => {\r\n      a.push(element);\r\n    });\r\n    setItems(a);\r\n    /*\r\n        <Button onClick={() => { Setcurrent(0); }} >Дополнительные тарифы</Button> <br />\r\n          <Button onClick={() => { Setcurrent(1); }} >Номера ВС</Button> <br />\r\n          <Button onClick={() => { Setcurrent(2); }} >Тип ВС</Button> <br />\r\n\r\n    */\r\n\r\n  }\r\n  return (\r\n    <div hidden={!visible} className={classes.fixheight}>\r\n\r\n      <div className={classes.root}>\r\n        <AppBar position=\"fixed\">\r\n          <Toolbar>\r\n            <Tooltip title=\"Меню\">\r\n              <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={() => { props.show(); }}>\r\n                <MenuIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              Редактирование записи\r\n            </Typography>\r\n\r\n          </Toolbar>\r\n        </AppBar>\r\n      </div>\r\n\r\n\r\n      <div >\r\n        <div className={classes.offset} />\r\n\r\n        <div>\r\n          \r\n          <input type=\"text\" value={txt} onChange={handleChange} />\r\n        </div>\r\n        <Tooltip title=\"Добавить\">\r\n          <Button onClick={() => updateTab()}>Update</Button>\r\n        </Tooltip>\r\n        {\r\n          items.map((it) => (\r\n            <div>\r\n              <span>{it}</span>\r\n              <input type=\"text\" />\r\n            </div>\r\n          ))\r\n        }\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n\r\n}\r\nexport { Comp1, GetComp }\r\nexport default Comp;","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { openMap } from './App';\r\n\r\n\r\nfunction dateformat(d, f) {\r\n  if (!d)\r\n    return d;\r\n\r\n\r\n  if (d.length != 24) {\r\n    let re = new RegExp('0\\.(0?)');\r\n    let res = f.match(/0\\.(0+)/);\r\n\r\n    let n = 0;\r\n    if (res)\r\n      if (res.length > 1) {\r\n        n = res[1].length;\r\n      }\r\n\r\n\r\n    if (n > 0)\r\n      return Number(d.toString()).toFixed(n);\r\n    else\r\n      return d;\r\n\r\n\r\n\r\n  }\r\n  f = f.replace('yyyy', d.substr(0, 4));\r\n  f = f.replace('yy', d.substr(2, 2));\r\n  f = f.replace('MM', d.substr(5, 2));\r\n  f = f.replace('dd', d.substr(8, 2));\r\n  f = f.replace('HH', d.substr(11, 2));\r\n  f = f.replace('mm', d.substr(14, 2));\r\n  return f;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n\r\n  },\r\n  container: {\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n\r\n});\r\n\r\nexport default function DataGrid(par) {\r\n  const classes = useStyles();\r\n  let initc = (openMap.get(par.id).data.curRow!=null) ? openMap.get(par.id).data.curRow : -1;\r\n  const [current, setCurrent] = useState(initc);\r\n\r\n\r\n  const handleClick = (event, index) => {\r\n    openMap.get(par.id).data.curRow = index;\r\n    if (openMap.get(par.id).data.setCurrent != null) {\r\n      openMap.get(par.id).data.setCurrent(index);\r\n    }\r\n    setCurrent(index);\r\n  };\r\n\r\n  return (\r\n\r\n    <Table size=\"small\">\r\n      <TableHead>\r\n        <TableRow>\r\n          {par.columns.map((column) => (\r\n            <TableCell\r\n              key={column.FieldName}\r\n              align={(column.DisplayFormat.indexOf('#') > -1) ? \"right\" : \"left\"}\r\n              style={{ fontSize: 14, maxWidth: 300 }}\r\n            >\r\n              {column.FieldCaption}\r\n            </TableCell>\r\n          ))}\r\n        </TableRow>\r\n      </TableHead>\r\n      <TableBody>\r\n        {par.rows.map((row, index) => {\r\n          return (\r\n            <TableRow\r\n              hover\r\n              selected={(index == current)}\r\n              onClick={(event) => handleClick(event, index)}\r\n\r\n            >\r\n              {par.columns.map((column) => {\r\n                const value = row[column.FieldName];\r\n                return (\r\n                  <TableCell key={column.FieldName}\r\n                    align={(column.DisplayFormat.indexOf('#') > -1) ? \"right\" : \"left\"}\r\n                    style={{ fontSize: 14, maxWidth: 300 }}\r\n                  >\r\n                    {(column.DisplayFormat == \"\") ? value : dateformat(value, column.DisplayFormat)}\r\n                  </TableCell>\r\n                );\r\n              })}\r\n            </TableRow>\r\n          );\r\n        })}\r\n      </TableBody>\r\n    </Table>\r\n\r\n\r\n  );\r\n\r\n}","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Select from '@material-ui/core/Select';\r\n\r\n\r\nexport default function DataFilter(par) {\r\n    const [action, setAction] = useState(0);\r\n    function textChange(event, index) {\r\n        par.columns[index].FindString = event.target.value;\r\n        setAction(action + 1);\r\n    }\r\n\r\n    function sortChange(event, index) {\r\n        let rang = 0;\r\n\r\n        par.columns.map((column, i)=>{\r\n            if (i!=index && column.SortOrder)    \r\n                if (column.SortOrder > rang)\r\n                    rang = column.SortOrder;\r\n        });\r\n        par.columns[index].SortOrder = rang+1;\r\n        par.columns[index].Sort = event.target.value;\r\n        setAction(action + 1);\r\n    }\r\n    return (\r\n        <Table size=\"small\">\r\n            <TableBody>\r\n\r\n                {par.columns.map((column, index) => {\r\n                    return (\r\n                        <TableRow key={column.FieldName}>\r\n                            <TableCell>\r\n                                <TextField label={column.FieldCaption} style={{ width: \"50vw\" }}\r\n                                    value={column.FindString}\r\n                                    onChange={(event) => textChange(event, index)}\r\n                                />\r\n                            </TableCell>\r\n                            <TableCell style={{ widht: 30 }}>\r\n                                {column.SortOrder}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                <Select native style={{ width: 200 }}\r\n                                value= {column.Sort}\r\n                                onChange={(event) => sortChange(event, index)}\r\n                                >\r\n                                    <option>Нет</option>\r\n                                    <option>По возрастанию</option>\r\n                                    <option>По убыванию</option>\r\n                                </Select>\r\n\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    );\r\n                })}\r\n\r\n            </TableBody>\r\n        </Table>\r\n    );\r\n}    ","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Select from '@material-ui/core/Select';\r\n\r\n\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\n\r\nimport { openMap, mainObj } from './App';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        marginLeft: theme.spacing(2.5),\r\n    },\r\n\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    offset: theme.mixins.toolbar,\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    fixheight: {\r\n        height: \"100vh\",\r\n        overflow: \"auto\",\r\n    },\r\n}));\r\n\r\n\r\nfunction Editor(props) {\r\n    const classes = useStyles();\r\n    const [mode, setMode] = useState(\"edit\");\r\n    const id = props.id;\r\n    return (\r\n        <div\r\n            hidden={mode != \"edit\"}\r\n            className={classes.fixheight}\r\n        >\r\n            <AppBar position=\"fixed\">\r\n                <Toolbar>\r\n                    <Tooltip title=\"Меню\">\r\n                        <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={() => { mainObj.showMenu(); }}>\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        {props.descr}\r\n                    </Typography>\r\n                    <IconButton onClick={() => { props.save(); }}>\r\n                        <SaveIcon />\r\n                    </IconButton>\r\n                    <IconButton onClick={() => { props.closeEditor(); }}>\r\n                        <ClearIcon />\r\n                    </IconButton>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <div className={classes.offset} />\r\n            <Table size=\"small\">\r\n                <TableBody>\r\n\r\n                    {openMap.get(id).data.ReferEdit.Editors.map((column, index) => {\r\n                        return (\r\n                            <TableRow key={column.FieldName}>\r\n                                <TableCell>\r\n                                    <TextField label={column.FieldCaption} style={{ width: \"80vw\" }} />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n\r\n                </TableBody>\r\n            </Table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Editor;","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Drawer from '@material-ui/core/Drawer';\r\n\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\n\r\n\r\nimport { openMap } from './App';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        marginLeft: theme.spacing(2.5),\r\n    },\r\n\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    offset: theme.mixins.toolbar,\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    fixheight: {\r\n        height: \"100vh\",\r\n        overflow: \"auto\",\r\n    },\r\n}));\r\n\r\nfunction Pagination(props) {\r\n    const classes = useStyles();\r\n    const id = props.id;\r\n    function count() {\r\n        if (openMap.get(id).data.TotalTab)\r\n            return openMap.get(id).data.TotalTab[0].n_total;\r\n        else\r\n            return 0;\r\n    }\r\n\r\n    function page() {\r\n        if (openMap.get(id).data.page)\r\n            return (openMap.get(id).data.page - 1);\r\n        else\r\n            return 0;\r\n    }\r\n\r\n    const rowsPerPage = 30;\r\n\r\n    const handleFirstPageButtonClick = (event) => {\r\n        props.onChangePage(event, 0);\r\n    };\r\n\r\n    const handleBackButtonClick = (event) => {\r\n        props.onChangePage(event, page() - 1);\r\n    };\r\n\r\n    const handleNextButtonClick = (event) => {\r\n        props.onChangePage(event, page() + 1);\r\n    };\r\n\r\n    const handleLastPageButtonClick = (event) => {\r\n        props.onChangePage(event, Math.max(0, Math.ceil(count() / rowsPerPage) - 1));\r\n    };\r\n\r\n    return (\r\n        <Toolbar>\r\n            <Typography className={classes.title}>\r\n                {page() * rowsPerPage + 1} - {Math.min((page() + 1) * rowsPerPage, count())} из {count()}\r\n            </Typography>\r\n            <IconButton\r\n                onClick={handleFirstPageButtonClick}\r\n                disabled={page() === 0}\r\n                aria-label=\"first page\"\r\n            >\r\n                <FirstPageIcon />\r\n            </IconButton>\r\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n                <KeyboardArrowLeft />\r\n            </IconButton>\r\n            {page() + 1} из {Math.max(0, Math.ceil(count() / rowsPerPage) - 1) + 1}\r\n            <IconButton\r\n                onClick={handleNextButtonClick}\r\n                disabled={page() >= Math.ceil(count() / rowsPerPage) - 1}\r\n                aria-label=\"next page\"\r\n            >\r\n                <KeyboardArrowRight />\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleLastPageButtonClick}\r\n                disabled={page() >= Math.ceil(count() / rowsPerPage) - 1}\r\n                aria-label=\"last page\"\r\n            >\r\n                <LastPageIcon />\r\n            </IconButton>\r\n        </Toolbar>\r\n    );\r\n}\r\n\r\nexport default Pagination;","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Drawer from '@material-ui/core/Drawer';\r\n\r\n\r\nimport { baseUrl, openMap, mainObj, prodaction } from './App';\r\nimport DataGrid from './DataGrid';\r\nimport DataFilter from './DataFilter';\r\nimport Editor from './Editor';\r\nimport Pagination from './Pagination';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport CodeIcon from '@material-ui/icons/Code';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\r\nimport DetailsIcon from '@material-ui/icons/Details';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        marginLeft: theme.spacing(2.5),\r\n    },\r\n\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    offset: theme.mixins.toolbar,\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    fixheight: {\r\n        height: \"100vh\",\r\n        overflow: \"auto\",\r\n    },\r\n}));\r\n\r\n\r\nfunction Finder(props) {\r\n    const classes = useStyles();\r\n    const [load, setLoad] = useState(true);\r\n    const [stateDrawer, setStateDrawer] = useState(false);\r\n    const [mode, setMode] = useState(\"grid\");\r\n    const [current, setCurrent] = useState(-1);\r\n\r\n    //Достаточно просто вызвать setCurrent, что бы запустить процесс отрисовки всего компонента\r\n    //openMap.get(props.id).data.setCurrent = handleCurrent;\r\n\r\n    const visible = props.visible;\r\n    const id = props.id;\r\n    const IdDeclare = props.params;\r\n\r\n    useEffect(() => { getData(); }, []);\r\n\r\n    const OpenMapData = () =>\r\n    {\r\n        return openMap.get(id).data;\r\n    }\r\n\r\n    const OpenMapId = () => {\r\n        return openMap.get(id);\r\n    }\r\n\r\n    async function getData() {\r\n        const url = baseUrl + \"React/FinderStart\";\r\n        let bd = new FormData();\r\n        bd.append(\"id\", IdDeclare);\r\n\r\n        let mid = OpenMapId(); \r\n        if (mid.SQLParams)\r\n        {\r\n            bd.append(\"SQLParams\", JSON.stringify(mid.SQLParams));\r\n        }            \r\n        if (mid.TextParams)\r\n            bd.append(\"TextParams\", JSON.stringify(mid.TextParams));\r\n    \r\n\r\n        const response = await fetch(url,\r\n            {\r\n                method: 'POST',\r\n                mode: (prodaction)?'no-cors':'cors',\r\n                cache: 'no-cache',\r\n                credentials: (prodaction)?'include':'omit',\r\n                //headers: { \"Content-Type\": \"application/json\" },\r\n                body: bd\r\n            }\r\n        );\r\n\r\n        const data = await response.json();\r\n        if (data.Error) {\r\n            //OpenMapData().Descr = data.Error;\r\n            setCurrent(current + 1);\r\n            alert(data.Error);\r\n        }\r\n        else {\r\n            let v = OpenMapId();\r\n            v.data = data;\r\n            setLoad(false);\r\n        }\r\n    }\r\n\r\n    function Descr() {\r\n        if (OpenMapData().Descr)\r\n            return OpenMapData().Descr;\r\n        else\r\n            return (\"Загрузка...\");\r\n    }\r\n\r\n\r\n    function renderTab() {\r\n        if (visible) {\r\n            return <DataGrid columns={OpenMapData().Fcols} rows={OpenMapData().MainTab} id={id} />\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function renderFilter() {\r\n        if (visible) {\r\n            return <DataFilter columns={OpenMapData().Fcols} />\r\n        }\r\n    }\r\n\r\n    const toggleDrawer = (open) => (event) => {\r\n        setStateDrawer(open);\r\n    };\r\n\r\n    async function updateTab() {\r\n        const url = baseUrl + \"React/FinderStart\";\r\n        let bd = new FormData();\r\n        let mid = OpenMapData(); \r\n        bd.append(\"id\", IdDeclare);\r\n        bd.append(\"mode\", \"data\");\r\n        bd.append(\"page\", (mid.page).toString());\r\n        bd.append(\"Fc\", JSON.stringify(mid.Fcols));\r\n        if (mid.SQLParams)\r\n            bd.append(\"SQLParams\", JSON.stringify(mid.SQLParams));\r\n\r\n        if (mid.TextParams)\r\n            bd.append(\"TextParams\", JSON.stringify(mid.TextParams));\r\n        const response = await fetch(url,\r\n            {\r\n                method: 'POST',\r\n                mode: (prodaction)?'no-cors':'cors',\r\n                cache: 'no-cache',\r\n                credentials: (prodaction)?'include':'omit',\r\n                body: bd\r\n            }\r\n        );\r\n\r\n        const data = await response.json();\r\n        if (data.Error) {\r\n            alert(data.Error);\r\n        }\r\n        else {\r\n            //let v = openMap.get(id);\r\n            mid.MainTab = data.MainTab;\r\n            mid.TotalTab = data.TotalTab;\r\n            mid.page = data.page;\r\n        }\r\n        if (stateDrawer)\r\n            setStateDrawer(false);\r\n\r\n        if (mode != \"grid\");\r\n        setMode(\"grid\");\r\n\r\n    }\r\n\r\n    function onChangePage(event, p) {\r\n        OpenMapData().page = p + 1;\r\n        updateTab();\r\n    }\r\n\r\n\r\n    function setFilter() {\r\n        updateTab();\r\n    }\r\n\r\n    const addinit = () => {\r\n        if (props.addinit && !load)\r\n            return (props.addinit());\r\n    }\r\n\r\n    function csv() {\r\n        const url = baseUrl + \"React/csv\";\r\n        let bd = new FormData();\r\n        let mid = OpenMapData();\r\n        bd.append(\"id\", IdDeclare);\r\n        bd.append(\"Fc\", JSON.stringify(mid.Fcols));\r\n        if (mid.SQLParams)\r\n            bd.append(\"SQLParams\", JSON.stringify(mid.SQLParams));\r\n        if (mid.TextParams)\r\n            bd.append(\"TextParams\", JSON.stringify(mid.TextParams));\r\n\r\n        fetch(url,\r\n            {\r\n                method: 'POST',\r\n                mode: 'cors',\r\n                cache: 'no-cache',\r\n                credentials: 'omit',\r\n                body: bd\r\n            }\r\n        ).then(res=>res.blob()).then( blob => {\r\n            let file = window.URL.createObjectURL(blob);\r\n            let a = document.createElement(\"a\");\r\n            a.href = URL.createObjectURL(blob);\r\n            a.setAttribute(\"download\", \"data.csv\");\r\n            a.click();\r\n          });\r\n    }\r\n\r\n    const openDetail = ()=>{\r\n        let mid = OpenMapData();\r\n        if (mid.curRow == null)\r\n            return;\r\n        let rw = mid.MainTab[mid.curRow];\r\n        let val = rw[mid.KeyF];\r\n        let jsstr = '{\"' + mid.KeyF + '\":\"' + val + '\"}';\r\n        let obj = {\r\n            Control: Finder,\r\n            Params: mid.KeyValue,\r\n            TextParams : JSON.parse(jsstr),\r\n            data: {}\r\n          }\r\n        let newid = id + \"_\" + val; \r\n        mainObj.addform(newid, obj)\r\n\r\n    }\r\n\r\n    const renderAddBut = () => {\r\n        if (load)\r\n            return;\r\n        return (\r\n            <React.Fragment>\r\n            <Tooltip title=\"Экспорт в CSV\">\r\n                <IconButton className={classes.menuButton} onClick={() => { csv(); }}>\r\n                    <CloudDownloadIcon />\r\n                </IconButton>\r\n            </Tooltip>\r\n            {(OpenMapData().KeyValue)?\r\n                <Tooltip title=\"Детали\">\r\n                    <IconButton className={classes.menuButton} onClick={() => { openDetail(); }}>\r\n                        <DetailsIcon />\r\n                    </IconButton>\r\n                </Tooltip> : \"\"\r\n            }\r\n            </React.Fragment>\r\n        );\r\n\r\n    }\r\n\r\n    const renderEditBut = () => {\r\n        if (load)\r\n            return;\r\n        if (OpenMapData().EditProc) {\r\n            return (\r\n\r\n                <React.Fragment>\r\n                    <IconButton className={classes.menuButton} onClick={() => { add(); }}>\r\n                        <AddIcon />\r\n                    </IconButton>\r\n                    <IconButton className={classes.menuButton} onClick={() => { edit(); }}>\r\n                        <EditIcon />\r\n                    </IconButton>\r\n                    <IconButton className={classes.menuButton}>\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    }\r\n    const save = () => {\r\n        alert(\"save\");\r\n        setMode(\"grid\");\r\n    }\r\n\r\n    const closeEditor = () => {\r\n        setMode(\"grid\");\r\n    }\r\n\r\n    const edit = () => {\r\n        setMode(\"edit\");\r\n    }\r\n\r\n    const add = () => {\r\n        setMode(\"add\");\r\n    }\r\n\r\n    const renderEditor = () => {\r\n        if (load)\r\n            return;\r\n        if (OpenMapData().EditProc) {\r\n            return (\r\n                <div\r\n                    hidden={!(mode == \"edit\" || mode == \"add\")}\r\n                    className={classes.fixheight}\r\n                >\r\n                    <Editor descr=\"Новая запись\" save={save} closeEditor={closeEditor} id={id} />\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Drawer anchor=\"top\" open={stateDrawer} onClose={toggleDrawer(false)}>\r\n                <Pagination id={id} onChangePage={onChangePage} />\r\n            </Drawer>\r\n            <div\r\n                hidden={!visible}\r\n                className={classes.fixheight}\r\n            >\r\n                <div\r\n                    hidden={mode != \"grid\"}\r\n                    className={classes.fixheight}\r\n                >\r\n                    <AppBar position=\"fixed\">\r\n                        <Toolbar>\r\n                            <Tooltip title=\"Меню\">\r\n                                <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={() => { mainObj.showMenu(); }}>\r\n                                    <MenuIcon />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            <Typography variant=\"h6\" className={classes.title}>\r\n                                {Descr()}\r\n                            </Typography>\r\n\r\n                            {renderEditBut()}\r\n                            {(load) ? <span></span> :\r\n                                <React.Fragment>\r\n                                    <IconButton onClick={() => { setMode(\"filter\"); }} className={classes.menuButton}>\r\n                                        <FilterListIcon />\r\n                                    </IconButton>\r\n\r\n                                    <Tooltip title=\"Страницы\" >\r\n                                        <IconButton className={classes.menuButton} onClick={() => { setStateDrawer(true); }}>\r\n                                            <CodeIcon />\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                </React.Fragment>\r\n                            }\r\n                            {renderAddBut()}\r\n                            {addinit()}\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                    <div className={classes.offset} />\r\n                    {(load) ? <span></span> : renderTab()}\r\n                </div>\r\n\r\n                <div\r\n                    hidden={mode != \"filter\"}\r\n                    className={classes.fixheight}\r\n                >\r\n                    <AppBar position=\"fixed\">\r\n                        <Toolbar>\r\n                            <Typography variant=\"h6\" className={classes.title}>\r\n                                {Descr()} (фильтровка и сортировка)\r\n                            </Typography>\r\n\r\n                            <IconButton onClick={() => { setFilter(); }}>\r\n                                <CheckIcon />\r\n                            </IconButton>\r\n\r\n\r\n                            <IconButton onClick={() => { setMode(\"grid\"); }}>\r\n                                <ClearIcon />\r\n                            </IconButton>\r\n\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                    <div className={classes.offset} />\r\n                    {(load) ? <span></span> : renderFilter()}\r\n                </div>\r\n\r\n                {renderEditor()}\r\n            </div>\r\n        </React.Fragment>);\r\n}\r\n\r\nexport default Finder;","import React, { useState, useEffect } from 'react';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { baseUrl, openMap } from '../App';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Finder from '../Finder';\r\nimport AttachmentIcon from '@material-ui/icons/Attachment';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nfunction Dogovors(props) {\r\n    //let initc = (openMap.get(props.id).data.curRow) ? openMap.get(props.id).data.curRow : 0;\r\n    const classes = useStyles();\r\n    const [current, setCurrent] = useState(-1);\r\n    function handleCurrent(r) {\r\n        //alert('a');\r\n        setCurrent(r);\r\n    }\r\n\r\n    //Достаточно просто вызвать setCurrent, что бы запустить процесс отрисовки\r\n    openMap.get(props.id).data.setCurrent = handleCurrent;\r\n\r\n\r\n    function addinit() {\r\n        /*\r\n        if (!openMap.get(props.id).data)\r\n            return;\r\n        if (!openMap.get(props.id).data.MainTab)\r\n            return;\r\n        */\r\n        let c = (openMap.get(props.id).data.curRow) ? openMap.get(props.id).data.curRow : 0;\r\n        //let c = current;\r\n        if (c == -1 || c > openMap.get(props.id).data.MainTab.length - 1)\r\n            return;\r\n        let agr_key = openMap.get(props.id).data.MainTab[c][\"agr_key\"].toString();\r\n        let fileUrl = baseUrl + \"Docfiles/dir?id=\" + agr_key + \"/\";\r\n\r\n        return (\r\n            <Tooltip title=\"Файлы\">\r\n                <a href={fileUrl} target=\"_blanck\" className={classes.menuButton}>\r\n                    <AttachmentIcon style={{ color: \"white\" }} />\r\n                </a>\r\n            </Tooltip>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Finder visible={props.visible} params={props.params} id={props.id} key={props.id} addinit={addinit} />\r\n    );\r\n}\r\n\r\nexport default Dogovors;","import React, { useState, useEffect } from 'react';\n\nimport './App.css';\nimport Comp, { Comp1, GetComp } from './Comp1';\nimport Finder from './Finder';\nimport Dogovors from './ext/Dogovors';\n//import {treeJson} from './MenuDat';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport TreeView from '@material-ui/lab/TreeView';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport TreeItem from '@material-ui/lab/TreeItem';\nimport IconButton from '@material-ui/core/IconButton';\n\nlet treeJson = [];\nlet mainObj = {};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    marginRight: 20,\n    marginLeft: 5\n\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n}));\n\nconst prodaction = true;\nconst baseUrl = (prodaction)?\"\":\"http://127.0.0.1:5000/\";\n\nlet menuMap = new Map();\nfunction createMenuMap(tree) {\n  tree.map((node) => {\n    if (node.children == null)\n      menuMap.set(node.id, node.attributes);\n    else\n      createMenuMap(node.children);\n  });\n}\n\nlet openMap = new Map();\nlet startObj = {\n  Control: Dogovors,\n  Params: \"1445\",\n  data: {}\n}\nopenMap.set(\"839\", startObj);\n\nlet openIDs = [];\nopenIDs.push(\"839\");\n\n\n//===========================================Application================================\nfunction App(props) {\n  const classes = useStyles();\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? 'dark' : 'light',\n        },\n      }),\n    [prefersDarkMode],\n  );\n  const [loading, setLoading] = useState(true);\n  const [current, Setcurrent] = useState(\"839\");\n  const [stateDrawer, setStateDrawer] = useState(false);\n  useEffect(() => { getTree(); }, []);\n\n  function show() {\n    setStateDrawer(true);\n  }\n\n  function getForm(id) {\n    let p = menuMap.get(id);\n    let control = (p.params) ? Finder : Comp1;\n    let params = p.params;\n    let SQLParams = null; //new Map();\n    if (p.link1 == \"RegulationPrint.repSDM\")\n    {\n      SQLParams = {\n        \"@DateStart\" : \"2000-01-01\",\n        \"@DateFinish\": \"2099-01-01\"\n      };\n      \n    }\n\n    if (p.link1 == \"RegulationPrint.ServiceReport\")\n    {\n      SQLParams = {\n        \"@DateStart\" : \"2000-01-01\",\n        \"@DateFinish\": \"2099-01-01\",\n        \"@AL_UTG\": \"<Все>\"\n      };\n      \n    }\n\n    return {\n      Conrol: control,\n      Params: params,\n      SQLParams : SQLParams\n    }\n  }\n\n  function open(id) {\n    if (openMap.get(id) == null) {\n      let c = getForm(id);\n      let obj = {\n        Control: c.Conrol,\n        Params: c.Params,\n        SQLParams : c.SQLParams,\n        data: {}\n      }\n      openMap.set(id, obj);\n      openIDs.push(id);\n    }\n    Setcurrent(id);\n  }\n\n  function addform(id, obj) {\n    if (openMap.get(id) == null) {\n      openMap.set(id, obj);\n      openIDs.push(id);\n    }\n    Setcurrent(id);\n  }\n\n  async function getTree() {\n\n    const url = baseUrl + \"ustore/gettree\";\n    const response = await fetch(url,\n      {\n        method: 'GET', // *GET, POST, PUT, DELETE, etc.\n        mode: (prodaction)?'no-cors':'cors', // no-cors, *cors, same-origin\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n        credentials: (prodaction)?'include':'omit' // include, *same-origin, omit\n      }\n    );\n\n    const data = await response.json();\n    treeJson = data;\n    menuMap.clear();\n    createMenuMap(treeJson);\n    setLoading(false);\n\n  }\n\n\n  const handleSelect = (event, nodeIds) => {\n    if (menuMap.get(nodeIds)) {\n      setStateDrawer(false);\n      open(nodeIds);\n    }\n  };\n\n  const renderTree = (nodes) => (\n    <TreeItem key={nodes.id} nodeId={nodes.id} label={nodes.text}>\n      {Array.isArray(nodes.children) ? nodes.children.map((node) => renderTree(node)) : null}\n    </TreeItem>\n  );\n\n  function rendItem(id) {\n    let value = openMap.get(id);\n    let Cm = value.Control;\n    return <Cm visible={(current == id)} params={value.Params} id={id} key={id} />\n  }\n  //Передаем фунцию через глобальный объект\n  mainObj.showMenu = show;\n  mainObj.addform = addform;\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n\n      <React.Fragment>\n        <Drawer anchor=\"left\" open={stateDrawer} variant=\"persistent\">\n          <div className={classes.drawerHeader}>\n            <IconButton onClick={(event) => { setStateDrawer(false); }}>\n              <ChevronLeftIcon />\n            </IconButton>\n          </div>\n\n          {\n            (loading) ? <p><em>Загрузка...</em></p> :\n              <TreeView\n                className={classes.root}\n                defaultCollapseIcon={<ExpandMoreIcon />}\n                defaultExpandIcon={<ChevronRightIcon />}\n                onNodeSelect={handleSelect}\n              >\n                {\n                  treeJson.map((node) => renderTree(node))\n                }\n              </TreeView>\n          }\n        </Drawer>\n        {\n          openIDs.map((id) => (\n            rendItem(id)\n          ))\n        }\n      </React.Fragment>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\nexport { baseUrl, openMap, mainObj, prodaction };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//import { Router } from \"react-router-dom\"\n//import {createBrowserHistory} from 'history'\n\n//const history = createBrowserHistory()\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}