{"version":3,"sources":["Comp1.js","DataGrid.js","DataFilter.js","Editor.js","Pagination.js","Finder.js","ext/Dogovors.js","App.js","serviceWorker.js","index.js"],"names":["Fin","items","text","this","push","f1","f2","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","offset","mixins","toolbar","title","fixheight","height","overflow","Comp1","props","visible","classes","hidden","className","AppBar","position","Toolbar","Tooltip","IconButton","edge","color","aria-label","onClick","mainObj","showMenu","Typography","variant","Comp","container","DataGrid","par","id","editid","OpenMapData","openMap","get","data","ReferEdit","Editors","joinRow","FindConrol","initc","curRow","useState","current","setCurrent","Table","size","TableHead","TableRow","columns","map","column","TableCell","key","FieldName","align","DisplayFormat","indexOf","style","fontSize","maxWidth","FieldCaption","TableBody","rows","row","index","hover","selected","event","handleClick","value","dateformat","DataFilter","action","setAction","TextField","label","width","FindString","onChange","target","textChange","widht","SortOrder","Select","native","Sort","rang","i","sortChange","marginLeft","Editor","mode","setMode","parentmode","WorkRow","renderField","classname","Fragment","InputLabel","htmlFor","toString","inputProps","name","valField","MainTab","keyField","s","fields","DispField","selectFinder","c","clearFinder","descr","save","closeEditor","params","IdDeclare","Pagination","count","TotalTab","n_total","page","Math","min","onChangePage","disabled","max","ceil","Finder","load","setLoad","stateDrawer","setStateDrawer","filterid","useEffect","getData","OpenMapId","a","url","baseUrl","bd","FormData","append","mid","fdat","SaveFieldList","f","SQLParams","JSON","stringify","TextParams","fetch","method","prodaction","cache","credentials","body","response","json","Error","alert","ColumnTab","Descr","updateTab","Fcols","open","confirmDelete","val","confirm","rowDelete","KeyF","DelProc","toLowerCase","Account","res","message","splice","DefaultValues","EditProc","length","saveSetting","edit","editSetting","add","Drawer","anchor","onClose","p","renderEditBut","then","blob","window","URL","createObjectURL","document","createElement","href","setAttribute","click","csv","KeyValue","jsstr","obj","Control","Params","newid","addform","openDetail","addinit","renderTab","renderFilter","editDescr","renderEditor","renderSetting","Dogovors","handleCurrent","r","set","agr_key","fileUrl","messUrl","d","RegExp","match","n","Number","toFixed","replace","substr","treeJson","drawerHeader","display","alignItems","padding","justifyContent","menuMap","Map","createMenuMap","tree","node","children","attributes","startObj","openIDs","App","prefersDarkMode","useMediaQuery","React","useMemo","createMuiTheme","palette","type","loading","setLoading","Setcurrent","openAlert","setOpenAlert","control","link1","Conrol","getForm","clear","getTree","alertConfirm","alertTitle","alertText","confirmAction","ThemeProvider","CssBaseline","TreeView","defaultCollapseIcon","defaultExpandIcon","onNodeSelect","nodeIds","renderTree","nodes","TreeItem","nodeId","Array","isArray","Dialog","keepMounted","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","Cm","rendItem","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.684d5fa7.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nimport { baseUrl, openMap, mainObj } from './App';\r\n\r\nclass Fin {\r\n  items = [];\r\n  text = \"\";\r\n  updateTab() {\r\n    this.items.push(\"oh\")\r\n  }\r\n}\r\n\r\nlet f1 = new Fin();\r\nf1.items = [\"aa\", \"bb\", \"dd\"];\r\nf1.text = \"Hello\"\r\n\r\nlet f2 = new Fin();\r\nf2.items = [\"uu\", \"zz\", \"xx\"];\r\nf2.text = \"привет\"\r\n\r\nconst MainList = [f1, f2];\r\n\r\n\r\nconst listcm = [Comp, Comp1, <div></div>];\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  offset: theme.mixins.toolbar,\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  fixheight: {\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n}));\r\n\r\nfunction GetComp(props) {\r\n  const classes = useStyles();\r\n  const current = props.component;\r\n  const Res = listcm[current];\r\n  //const [id, SetId] = useState(props.id);\r\n  let id = props.id;\r\n  return <Res id={id} />;\r\n}\r\n\r\nfunction Comp1(props) {\r\n  const visible = props.visible;\r\n  const classes = useStyles();\r\n  return <div\r\n    hidden={!visible}\r\n  >\r\n    <div className={classes.root}>\r\n      <AppBar position=\"fixed\">\r\n        <Toolbar>\r\n          <Tooltip title=\"Меню\">\r\n            <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={() => { mainObj.showMenu(); }}>\r\n              <MenuIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Карточки рейса\r\n              </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <div className={classes.offset} />\r\n    </div>\r\n  </div>\r\n}\r\n\r\nfunction Comp(props) {\r\n\r\n\r\n  /*\r\n  if (MainList.length == 0)\r\n  {\r\n      let f2 = new Fin();\r\n      f2.items = [\"uu1\", \"zz1\", \"xx1\"];\r\n      f2.text = \"привет\";\r\n      MainList.push(f2);\r\n  };\r\n  */\r\n  const classes = useStyles();\r\n  const { visible } = props;\r\n  const p = MainList[0];\r\n\r\n  //const p = new Fin();\r\n  //p.items = [\"aa\", \"bb\", \"cc\"];\r\n\r\n  const [items, setItems] = useState(p.items);\r\n  const [txt, setTxt] = useState(p.text);\r\n\r\n\r\n\r\n  function handleChange(event) {\r\n    let a = event.target.value;\r\n    setTxt(a);\r\n    p.text = a;\r\n  }\r\n\r\n  function updateTab() {\r\n    p.updateTab();\r\n    let a = [];\r\n    p.items.forEach(element => {\r\n      a.push(element);\r\n    });\r\n    setItems(a);\r\n    /*\r\n        <Button onClick={() => { Setcurrent(0); }} >Дополнительные тарифы</Button> <br />\r\n          <Button onClick={() => { Setcurrent(1); }} >Номера ВС</Button> <br />\r\n          <Button onClick={() => { Setcurrent(2); }} >Тип ВС</Button> <br />\r\n\r\n    */\r\n\r\n  }\r\n  return (\r\n    <div hidden={!visible} className={classes.fixheight}>\r\n\r\n      <div className={classes.root}>\r\n        <AppBar position=\"fixed\">\r\n          <Toolbar>\r\n            <Tooltip title=\"Меню\">\r\n              <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={() => { props.show(); }}>\r\n                <MenuIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              Редактирование записи\r\n            </Typography>\r\n\r\n          </Toolbar>\r\n        </AppBar>\r\n      </div>\r\n\r\n\r\n      <div >\r\n        <div className={classes.offset} />\r\n\r\n        <div>\r\n          \r\n          <input type=\"text\" value={txt} onChange={handleChange} />\r\n        </div>\r\n        <Tooltip title=\"Добавить\">\r\n          <Button onClick={() => updateTab()}>Update</Button>\r\n        </Tooltip>\r\n        {\r\n          items.map((it) => (\r\n            <div>\r\n              <span>{it}</span>\r\n              <input type=\"text\" />\r\n            </div>\r\n          ))\r\n        }\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n\r\n}\r\nexport { Comp1, GetComp }\r\nexport default Comp;","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { openMap, dateformat } from './App';\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n\r\n  },\r\n  container: {\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n\r\n});\r\n\r\nexport default function DataGrid(par) {\r\n  const classes = useStyles();\r\n  const id = par.id;\r\n  const editid = par.editid;\r\n\r\n  const OpenMapData = () => {\r\n    if (editid == null)\r\n        return openMap.get(id).data;\r\n    else \r\n        return openMap.get(id).data.ReferEdit.Editors[editid].joinRow.FindConrol;\r\n  }\r\n  \r\n  let initc = (OpenMapData().curRow!=null) ? OpenMapData().curRow : 0;\r\n  const [current, setCurrent] = useState(initc);\r\n\r\n\r\n  const handleClick = (event, index) => {\r\n    OpenMapData().curRow = index;\r\n    if (openMap.get(par.id).data.setCurrent != null) {\r\n      openMap.get(par.id).data.setCurrent(index);\r\n    }\r\n    setCurrent(index);\r\n  };\r\n\r\n  return (\r\n\r\n    <Table size=\"small\">\r\n      <TableHead>\r\n        <TableRow>\r\n          {par.columns.map((column) => (\r\n            <TableCell\r\n              key={column.FieldName}\r\n              align={(column.DisplayFormat.indexOf('#') > -1) ? \"right\" : \"left\"}\r\n              style={{ fontSize: 14, maxWidth: 300 }}\r\n            >\r\n              {column.FieldCaption}\r\n            </TableCell>\r\n          ))}\r\n        </TableRow>\r\n      </TableHead>\r\n      <TableBody>\r\n        {par.rows.map((row, index) => {\r\n          return (\r\n            <TableRow\r\n              hover\r\n              selected={(index == current)}\r\n              onClick={(event) => handleClick(event, index)}\r\n\r\n            >\r\n              {par.columns.map((column) => {\r\n                const value = row[column.FieldName];\r\n                return (\r\n                  <TableCell key={column.FieldName}\r\n                    align={(column.DisplayFormat.indexOf('#') > -1) ? \"right\" : \"left\"}\r\n                    style={{ fontSize: 14, maxWidth: 300 }}\r\n                  >\r\n                    {(column.DisplayFormat == \"\") ? value : dateformat(value, column.DisplayFormat)}\r\n                  </TableCell>\r\n                );\r\n              })}\r\n            </TableRow>\r\n          );\r\n        })}\r\n      </TableBody>\r\n    </Table>\r\n\r\n\r\n  );\r\n\r\n}","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Select from '@material-ui/core/Select';\r\n\r\n\r\nexport default function DataFilter(par) {\r\n    const [action, setAction] = useState(0);\r\n    function textChange(event, index) {\r\n        par.columns[index].FindString = event.target.value;\r\n        setAction(action + 1);\r\n    }\r\n\r\n    function sortChange(event, index) {\r\n        let rang = 0;\r\n\r\n        par.columns.map((column, i)=>{\r\n            if (i!=index && column.SortOrder)    \r\n                if (column.SortOrder > rang)\r\n                    rang = column.SortOrder;\r\n        });\r\n        par.columns[index].SortOrder = rang+1;\r\n        par.columns[index].Sort = event.target.value;\r\n        setAction(action + 1);\r\n    }\r\n    return (\r\n        <Table size=\"small\">\r\n            <TableBody>\r\n\r\n                {par.columns.map((column, index) => {\r\n                    return (\r\n                        <TableRow key={column.FieldName}>\r\n                            <TableCell>\r\n                                <TextField label={column.FieldCaption} style={{ width: \"50vw\" }}\r\n                                    value={column.FindString}\r\n                                    onChange={(event) => textChange(event, index)}\r\n                                />\r\n                            </TableCell>\r\n                            <TableCell style={{ widht: 30 }}>\r\n                                {column.SortOrder}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                <Select native style={{ width: 200 }}\r\n                                value= {column.Sort}\r\n                                onChange={(event) => sortChange(event, index)}\r\n                                >\r\n                                    <option>Нет</option>\r\n                                    <option>По возрастанию</option>\r\n                                    <option>По убыванию</option>\r\n                                </Select>\r\n\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    );\r\n                })}\r\n\r\n            </TableBody>\r\n        </Table>\r\n    );\r\n}    ","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\n\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\n\r\nimport { openMap, mainObj, dateformat } from './App';\r\nimport Finder from './Finder';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        marginLeft: theme.spacing(2.5),\r\n    },\r\n\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    offset: theme.mixins.toolbar,\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    fixheight: {\r\n        height: \"100vh\",\r\n        overflow: \"auto\",\r\n    },\r\n}));\r\n\r\n\r\nfunction Editor(props) {\r\n    const classes = useStyles();\r\n    const [mode, setMode] = useState(\"edit\");\r\n    const [action, setAction] = useState(0);\r\n    const id = props.id;\r\n    const parentmode = props.mode;\r\n\r\n    function textChange(event, index) {\r\n        openMap.get(id).data.WorkRow[index] = event.target.value;\r\n        setAction(action + 1);\r\n    }\r\n\r\n    const sortChange = (event, column) => {\r\n        column.joinRow.FindConrol.MainTab.map((row) => {\r\n            if (row[column.joinRow.keyField] == event.target.value) {\r\n                for (let s in column.joinRow.fields) {\r\n                    openMap.get(id).data.WorkRow[column.joinRow.fields[s]] = row[s];\r\n                }\r\n                setAction(action + 1);\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    const renderField = (column, index) => {\r\n        if (column.joinRow != null) {\r\n            if (column.joinRow.classname == \"Bureau.GridCombo\") {\r\n                return (\r\n                    <React.Fragment>\r\n                        <InputLabel htmlFor={id + \"_\" + index.toString() + \"_\" + column.FieldName + \"_field\"}>{column.FieldCaption}</InputLabel>\r\n                        <Select native style={{ width: \"93vw\" }}\r\n                            inputProps={{\r\n                                name: id + \"_\" + index.toString() + \"_\" + column.FieldName + \"_field\",\r\n                                id: id + \"_\" + index.toString() + \"_\" + column.FieldName + \"_field\",\r\n                            }}\r\n                            value={openMap.get(id).data.WorkRow[column.joinRow.valField]}\r\n                            onChange={(event) => sortChange(event, column)}\r\n                        >\r\n                            {column.joinRow.FindConrol.MainTab.map((row) => {\r\n                                return (<option value={row[column.joinRow.keyField]}>{row[column.joinRow.FindConrol.DispField]}</option>);\r\n                            })}\r\n\r\n                        </Select>\r\n                    </React.Fragment>\r\n                );\r\n            }\r\n            if (column.joinRow.classname == \"Bureau.Finder\") {\r\n                return (\r\n                    <React.Fragment>\r\n                        <TextField label={column.FieldCaption} key={column.FieldName}\r\n                            value={openMap.get(id).data.WorkRow[column.FieldName]}\r\n                            style={{ width: \"90vw\" }}\r\n                            onChange={(event) => textChange(event, column.FieldName)}\r\n                        />\r\n\r\n                        <IconButton onClick={() => { setMode(\"finder_\" + index.toString()) }}>\r\n                            <SearchIcon />\r\n                        </IconButton>\r\n\r\n                    </React.Fragment>\r\n                );\r\n            }\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                <TextField label={column.FieldCaption} key={column.FieldName}\r\n                    value={openMap.get(id).data.WorkRow[column.FieldName]}\r\n                    style={{ width: \"93vw\" }}\r\n                    onChange={(event) => textChange(event, column.FieldName)}\r\n                />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    const selectFinder = (editid) => {\r\n        let column = openMap.get(id).data.ReferEdit.Editors[editid];\r\n        let c = openMap.get(id).data.ReferEdit.Editors[editid].joinRow.FindConrol.curRow;\r\n        let row = column.joinRow.FindConrol.MainTab[c];\r\n        for (let s in column.joinRow.fields) {\r\n            openMap.get(id).data.WorkRow[column.joinRow.fields[s]] = row[s];\r\n        }\r\n        setMode(\"edit\");\r\n    }\r\n\r\n    const clearFinder = () => {\r\n        setMode(\"edit\");\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div\r\n                hidden={mode != \"edit\"}\r\n                className={classes.fixheight}\r\n            >\r\n                <AppBar position=\"fixed\">\r\n                    <Toolbar>\r\n                        {(parentmode!=\"setting\")?<Tooltip title=\"Меню\">\r\n                            <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={() => { mainObj.showMenu(); }}>\r\n                                <MenuIcon />\r\n                            </IconButton>\r\n                        </Tooltip>:\"\"}\r\n                        <Typography variant=\"h6\" className={classes.title}>\r\n                            {props.descr}\r\n                        </Typography>\r\n                        <IconButton onClick={() => { props.save(); }}>\r\n                            <SaveIcon />\r\n                        </IconButton>\r\n                        <IconButton onClick={() => { props.closeEditor(); }}>\r\n                            <ClearIcon />\r\n                        </IconButton>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <div className={classes.offset} />\r\n                <Table size=\"small\">\r\n                    <TableBody>\r\n\r\n                        {openMap.get(id).data.ReferEdit.Editors.map((column, index) => {\r\n                            return (\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        {renderField(column, index)}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            );\r\n                        })}\r\n\r\n                    </TableBody>\r\n                </Table>\r\n            </div>\r\n            {openMap.get(id).data.ReferEdit.Editors.map((column, index) => {\r\n                if (column.joinRow != null)\r\n                    if (column.joinRow.classname == \"Bureau.Finder\")\r\n                        return (\r\n                            <Finder visible={(mode == \"finder_\" + index.toString())} params={column.joinRow.IdDeclare} id={id} key={id.toString() + index.toString()} editid={index}\r\n                                selectFinder={selectFinder}\r\n                                clearFinder={clearFinder}\r\n                            />\r\n                        );\r\n            })}\r\n        </React.Fragment>\r\n\r\n    );\r\n}\r\n\r\nexport default Editor;","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Drawer from '@material-ui/core/Drawer';\r\n\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\n\r\n\r\nimport { openMap } from './App';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        marginLeft: theme.spacing(2.5),\r\n    },\r\n\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    offset: theme.mixins.toolbar,\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    fixheight: {\r\n        height: \"100vh\",\r\n        overflow: \"auto\",\r\n    },\r\n}));\r\n\r\nfunction Pagination(props) {\r\n    const classes = useStyles();\r\n    const id = props.id;\r\n    const editid = props.editid;\r\n\r\n    const OpenMapData = () => {\r\n        if (editid == null)\r\n            return openMap.get(id).data;\r\n        else \r\n            return openMap.get(id).data.ReferEdit.Editors[editid].joinRow.FindConrol;\r\n    }\r\n\r\n    function count() {\r\n        if (OpenMapData().TotalTab)\r\n            return OpenMapData().TotalTab[0].n_total;\r\n        else\r\n            return 0;\r\n    }\r\n\r\n    function page() {\r\n        if (OpenMapData().page)\r\n            return (OpenMapData().page - 1);\r\n        else\r\n            return 0;\r\n    }\r\n\r\n    const rowsPerPage = 30;\r\n\r\n    const handleFirstPageButtonClick = (event) => {\r\n        props.onChangePage(event, 0);\r\n    };\r\n\r\n    const handleBackButtonClick = (event) => {\r\n        props.onChangePage(event, page() - 1);\r\n    };\r\n\r\n    const handleNextButtonClick = (event) => {\r\n        props.onChangePage(event, page() + 1);\r\n    };\r\n\r\n    const handleLastPageButtonClick = (event) => {\r\n        props.onChangePage(event, Math.max(0, Math.ceil(count() / rowsPerPage) - 1));\r\n    };\r\n\r\n    return (\r\n        <Toolbar>\r\n            <Typography className={classes.title}>\r\n                {page() * rowsPerPage + 1} - {Math.min((page() + 1) * rowsPerPage, count())} из {count()}\r\n            </Typography>\r\n            <IconButton\r\n                onClick={handleFirstPageButtonClick}\r\n                disabled={page() === 0}\r\n                aria-label=\"first page\"\r\n            >\r\n                <FirstPageIcon />\r\n            </IconButton>\r\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n                <KeyboardArrowLeft />\r\n            </IconButton>\r\n            {page() + 1} из {Math.max(0, Math.ceil(count() / rowsPerPage) - 1) + 1}\r\n            <IconButton\r\n                onClick={handleNextButtonClick}\r\n                disabled={page() >= Math.ceil(count() / rowsPerPage) - 1}\r\n                aria-label=\"next page\"\r\n            >\r\n                <KeyboardArrowRight />\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleLastPageButtonClick}\r\n                disabled={page() >= Math.ceil(count() / rowsPerPage) - 1}\r\n                aria-label=\"last page\"\r\n            >\r\n                <LastPageIcon />\r\n            </IconButton>\r\n        </Toolbar>\r\n    );\r\n}\r\n\r\nexport default Pagination;","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Drawer from '@material-ui/core/Drawer';\r\n\r\n\r\nimport { baseUrl, openMap, mainObj, prodaction, dateformat } from './App';\r\nimport DataGrid from './DataGrid';\r\nimport DataFilter from './DataFilter';\r\nimport Editor from './Editor';\r\nimport Pagination from './Pagination';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport CodeIcon from '@material-ui/icons/Code';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\r\nimport DetailsIcon from '@material-ui/icons/Details';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        marginLeft: theme.spacing(2.5),\r\n    },\r\n\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    offset: theme.mixins.toolbar,\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    fixheight: {\r\n        height: \"100vh\",\r\n        overflow: \"auto\",\r\n    },\r\n}));\r\n\r\n\r\nfunction Finder(props) {\r\n    const classes = useStyles();\r\n    const [load, setLoad] = useState(true);\r\n    const [stateDrawer, setStateDrawer] = useState(false);\r\n    const [mode, setMode] = useState(\"grid\");\r\n    const [current, setCurrent] = useState(-1);\r\n\r\n    //Достаточно просто вызвать setCurrent, что бы запустить процесс отрисовки всего компонента\r\n    //openMap.get(props.id).data.setCurrent = handleCurrent;\r\n\r\n    const visible = props.visible;\r\n    const id = props.id;\r\n    const editid = props.editid;\r\n    const IdDeclare = props.params;\r\n    const filterid = props.filterid;\r\n\r\n    useEffect(() => { getData(); }, []);\r\n\r\n    const OpenMapData = () => {\r\n        if (editid == null)\r\n            return openMap.get(id).data;\r\n        else\r\n            return openMap.get(id).data.ReferEdit.Editors[editid].joinRow.FindConrol;\r\n    }\r\n\r\n    const OpenMapId = () => {\r\n        return openMap.get(id);\r\n    }\r\n\r\n    async function getData() {\r\n        if (editid != null) {\r\n            OpenMapData().curRow = 0;\r\n            setLoad(false);\r\n            return;\r\n        }\r\n        const url = baseUrl + \"React/FinderStart\";\r\n        let bd = new FormData();\r\n        bd.append(\"id\", IdDeclare);\r\n\r\n        let mid = OpenMapId();\r\n\r\n        if (filterid != null && openMap.get(filterid) != null) {\r\n            let fdat = openMap.get(filterid).data;\r\n            fdat.ReferEdit.SaveFieldList.map((f) => {\r\n                mid.SQLParams[\"@\" + f] = fdat.MainTab[0][f];\r\n            });\r\n        }\r\n\r\n\r\n        if (mid.SQLParams) {\r\n            bd.append(\"SQLParams\", JSON.stringify(mid.SQLParams));\r\n        }\r\n        if (mid.TextParams)\r\n            bd.append(\"TextParams\", JSON.stringify(mid.TextParams));\r\n\r\n\r\n        const response = await fetch(url,\r\n            {\r\n                method: 'POST',\r\n                mode: (prodaction) ? 'no-cors' : 'cors',\r\n                cache: 'no-cache',\r\n                credentials: (prodaction) ? 'include' : 'omit',\r\n                //headers: { \"Content-Type\": \"application/json\" },\r\n                body: bd\r\n            }\r\n        );\r\n\r\n        const data = await response.json();\r\n        if (data.Error) {\r\n            //OpenMapData().Descr = data.Error;\r\n            //setCurrent(current + 1);\r\n            mainObj.alert(\"Ошибка\", data.Error);\r\n        }\r\n        else {\r\n            data.curRow = 0;\r\n            data.WorkRow = {};\r\n            data.ColumnTab.map((column) => {\r\n                data.WorkRow[column] = \"\";\r\n            });\r\n            let v = OpenMapId();\r\n            v.data = data;\r\n            setLoad(false);\r\n        }\r\n    }\r\n\r\n    function Descr() {\r\n        if (OpenMapData().Descr)\r\n            return OpenMapData().Descr;\r\n        else\r\n            return (\"Загрузка...\");\r\n    }\r\n\r\n\r\n    function renderTab() {\r\n        if (visible) {\r\n            return <DataGrid columns={OpenMapData().Fcols} rows={OpenMapData().MainTab} id={id} editid={editid} />\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function renderFilter() {\r\n        if (visible) {\r\n            return <DataFilter columns={OpenMapData().Fcols} />\r\n        }\r\n    }\r\n\r\n    const toggleDrawer = (open) => (event) => {\r\n        setStateDrawer(open);\r\n    };\r\n\r\n    async function updateTab() {\r\n        const url = baseUrl + \"React/FinderStart\";\r\n        let bd = new FormData();\r\n        let mid = OpenMapData();\r\n        bd.append(\"id\", IdDeclare);\r\n        bd.append(\"mode\", \"data\");\r\n        bd.append(\"page\", (mid.page).toString());\r\n        bd.append(\"Fc\", JSON.stringify(mid.Fcols));\r\n        if (mid.SQLParams)\r\n            bd.append(\"SQLParams\", JSON.stringify(mid.SQLParams));\r\n\r\n        if (mid.TextParams)\r\n            bd.append(\"TextParams\", JSON.stringify(mid.TextParams));\r\n        const response = await fetch(url,\r\n            {\r\n                method: 'POST',\r\n                mode: (prodaction) ? 'no-cors' : 'cors',\r\n                cache: 'no-cache',\r\n                credentials: (prodaction) ? 'include' : 'omit',\r\n                body: bd\r\n            }\r\n        );\r\n\r\n        const data = await response.json();\r\n        if (data.Error) {\r\n            mainObj.alert(\"Ошибка\", data.Error);\r\n        }\r\n        else {\r\n            //let v = openMap.get(id);\r\n            mid.MainTab = data.MainTab;\r\n            mid.TotalTab = data.TotalTab;\r\n            mid.page = data.page;\r\n        }\r\n        if (stateDrawer)\r\n            setStateDrawer(false);\r\n\r\n        if (mode != \"grid\");\r\n        setMode(\"grid\");\r\n\r\n    }\r\n\r\n    function onChangePage(event, p) {\r\n        OpenMapData().page = p + 1;\r\n        updateTab();\r\n    }\r\n\r\n\r\n    function setFilter() {\r\n        updateTab();\r\n    }\r\n\r\n    const addinit = () => {\r\n        if (props.addinit && !load)\r\n            return (props.addinit());\r\n    }\r\n\r\n    function csv() {\r\n        const url = baseUrl + \"React/csv\";\r\n        let bd = new FormData();\r\n        let mid = OpenMapData();\r\n        bd.append(\"id\", IdDeclare);\r\n        bd.append(\"Fc\", JSON.stringify(mid.Fcols));\r\n        if (mid.SQLParams)\r\n            bd.append(\"SQLParams\", JSON.stringify(mid.SQLParams));\r\n        if (mid.TextParams)\r\n            bd.append(\"TextParams\", JSON.stringify(mid.TextParams));\r\n\r\n        fetch(url,\r\n            {\r\n                method: 'POST',\r\n                mode: (prodaction) ? 'no-cors' : 'cors',\r\n                cache: 'no-cache',\r\n                credentials: (prodaction) ? 'include' : 'omit',\r\n                body: bd\r\n            }\r\n        ).then(res => res.blob()).then(blob => {\r\n            let file = window.URL.createObjectURL(blob);\r\n            let a = document.createElement(\"a\");\r\n            a.href = URL.createObjectURL(blob);\r\n            a.setAttribute(\"download\", \"data.csv\");\r\n            a.click();\r\n        });\r\n    }\r\n\r\n    const openDetail = () => {\r\n        let mid = OpenMapData();\r\n        if (mid.curRow == null)\r\n            return;\r\n        let rw = mid.MainTab[mid.curRow];\r\n        let val = rw[mid.KeyF];\r\n        let jsstr = {};  // '{\"' + mid.KeyF + '\":\"' + val + '\"}';\r\n        jsstr[mid.KeyF] = val;\r\n        let obj = {\r\n            Control: Finder,\r\n            Params: mid.KeyValue,\r\n            TextParams: jsstr, //JSON.parse(jsstr),\r\n            data: {}\r\n        }\r\n        let newid = id + \"_\" + val;\r\n        mainObj.addform(newid, obj)\r\n\r\n    }\r\n\r\n    const renderAddBut = () => {\r\n        if (editid != null) {\r\n            return (\r\n                <React.Fragment>\r\n                    <IconButton onClick={() => { props.selectFinder(editid); }}>\r\n                        <CheckIcon />\r\n                    </IconButton>\r\n\r\n\r\n                    <IconButton onClick={() => { props.clearFinder(); }}>\r\n                        <ClearIcon />\r\n                    </IconButton>\r\n                </React.Fragment>\r\n            )\r\n        }\r\n        if (load)\r\n            return;\r\n        return (\r\n            <React.Fragment>\r\n                <Tooltip title=\"Экспорт в CSV\">\r\n                    <IconButton className={classes.menuButton} onClick={() => { csv(); }}>\r\n                        <CloudDownloadIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                {(OpenMapData().KeyValue) ?\r\n                    <Tooltip title=\"Детали\">\r\n                        <IconButton className={classes.menuButton} onClick={() => { openDetail(); }}>\r\n                            <DetailsIcon />\r\n                        </IconButton>\r\n                    </Tooltip> : \"\"\r\n                }\r\n                {(filterid != null) ?\r\n                    <Tooltip title=\"Параметры\">\r\n                        <IconButton className={classes.menuButton} onClick={() => { editSetting(); }}>\r\n                            <SettingsIcon />\r\n                        </IconButton>\r\n                    </Tooltip> : \"\"\r\n                }\r\n            </React.Fragment>\r\n        );\r\n\r\n    }\r\n\r\n    const renderEditBut = () => {\r\n        if (editid != null)\r\n            return;\r\n        if (load)\r\n            return;\r\n        if (OpenMapData().EditProc) {\r\n            return (\r\n\r\n                <React.Fragment>\r\n                    <IconButton className={classes.menuButton} onClick={() => { add(); }}>\r\n                        <AddIcon />\r\n                    </IconButton>\r\n                    <IconButton className={classes.menuButton} onClick={() => { edit(); }}>\r\n                        <EditIcon />\r\n                    </IconButton>\r\n                    <IconButton className={classes.menuButton} onClick={() => { confirmDelete(); }}>\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    }\r\n\r\n    const confirmDelete = () => {\r\n        let mid = OpenMapData();\r\n        if (mid.curRow == null)\r\n            return;\r\n        let rw = mid.MainTab[mid.curRow];\r\n        let val = rw[mid.DispField];\r\n        mainObj.confirm(Descr(), \"Удалить запись '\" + val + \"'?\", rowDelete)\r\n    }\r\n\r\n    const rowDelete = async () => {\r\n        let mid = OpenMapData();\r\n        let SQLParams = {};\r\n        SQLParams[mid.KeyF] = mid.MainTab[mid.curRow][mid.KeyF];\r\n        if (mid.DelProc.toLowerCase().indexOf(\"_del_1\") > -1) {\r\n            SQLParams[\"AUDTUSER\"] = mid.Account;\r\n        }\r\n\r\n        const url = baseUrl + \"React/exec\";\r\n        let bd = new FormData();\r\n\r\n        bd.append(\"EditProc\", mid.DelProc);\r\n        bd.append(\"SQLParams\", JSON.stringify(SQLParams));\r\n        bd.append(\"KeyF\", mid.KeyF);\r\n\r\n        const response = await fetch(url,\r\n            {\r\n                method: 'POST',\r\n                mode: (prodaction) ? 'no-cors' : 'cors',\r\n                cache: 'no-cache',\r\n                credentials: (prodaction) ? 'include' : 'omit',\r\n                body: bd\r\n            }\r\n        );\r\n\r\n        const res = await response.json();\r\n        if (res.message != \"OK\") {\r\n            mainObj.alert(\"Ошибка\", res.message);\r\n            return;\r\n        }\r\n\r\n        mid.MainTab.splice(mid.curRow, 1);\r\n        setCurrent(current + 1);\r\n    }\r\n\r\n    const save = async () => {\r\n\r\n        let data = OpenMapData();\r\n        //default values\r\n        for (let f in data.DefaultValues) {\r\n            data.WorkRow[f] = data.DefaultValues[f];\r\n        }\r\n\r\n        for (let f in data.TextParams) {\r\n            data.WorkRow[f] = data.TextParams[f];\r\n        }\r\n\r\n        let SQLParams = {};\r\n        data.ReferEdit.SaveFieldList.map((f) => {\r\n            SQLParams[f] = data.WorkRow[f];\r\n        });\r\n\r\n        const url = baseUrl + \"React/exec\";\r\n        let bd = new FormData();\r\n\r\n        bd.append(\"EditProc\", data.EditProc);\r\n        bd.append(\"SQLParams\", JSON.stringify(SQLParams));\r\n        bd.append(\"KeyF\", data.KeyF);\r\n\r\n        const response = await fetch(url,\r\n            {\r\n                method: 'POST',\r\n                mode: (prodaction) ? 'no-cors' : 'cors',\r\n                cache: 'no-cache',\r\n                credentials: (prodaction) ? 'include' : 'omit',\r\n                body: bd\r\n            }\r\n        );\r\n\r\n        const res = await response.json();\r\n        if (res.message != \"OK\") {\r\n            mainObj.alert(\"Ошибка\", res.message);\r\n            return;\r\n        }\r\n        else {\r\n            if (res.ColumnTab.length == 1) {\r\n                data.WorkRow[data.KeyF] = res.MainTab[0][res.ColumnTab[0]];\r\n            }\r\n            else {\r\n                res.ColumnTab.map((column) => {\r\n                    data.WorkRow[column] = res.MainTab[0][column];\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n        let row = {};\r\n        if (mode == \"edit\") {\r\n            let c = data.curRow;\r\n            row = data.MainTab[c];\r\n        }\r\n        data.ColumnTab.map((column) => {\r\n            row[column] = data.WorkRow[column];\r\n        });\r\n        if (mode == \"add\")\r\n            data.MainTab.push(row);\r\n        setMode(\"grid\");\r\n    }\r\n\r\n    const saveSetting = () => {\r\n\r\n        let data = openMap.get(filterid).data;\r\n        let row = data.MainTab[0];\r\n        data.ColumnTab.map((column) => {\r\n            row[column] = data.WorkRow[column];\r\n        });\r\n\r\n        let mid = OpenMapData();\r\n        data.ReferEdit.SaveFieldList.map((f) => {\r\n            mid.SQLParams[\"@\" + f] = data.MainTab[0][f];\r\n        });\r\n        updateTab();\r\n    }\r\n\r\n    const closeEditor = () => {\r\n        setMode(\"grid\");\r\n    }\r\n\r\n    const edit = () => {\r\n        let data = OpenMapData();\r\n        data.WorkRow = {};\r\n        let c = data.curRow;\r\n        let row = data.MainTab[c];\r\n        data.ColumnTab.map((column) => {\r\n            data.WorkRow[column] = (row[column] == null) ? \"\" : row[column];\r\n        });\r\n        data.ReferEdit.Editors.map((column) => {\r\n            if (column.DisplayFormat != \"\") {\r\n                data.WorkRow[column.FieldName] = dateformat(data.WorkRow[column.FieldName], column.DisplayFormat)\r\n            }\r\n        });\r\n\r\n        setMode(\"edit\");\r\n    }\r\n\r\n    const editSetting = () => {\r\n        let data = openMap.get(filterid).data;\r\n        data.WorkRow = {};\r\n        let row = data.MainTab[0];\r\n        data.ColumnTab.map((column) => {\r\n            data.WorkRow[column] = (row[column] == null) ? \"\" : row[column];\r\n        });\r\n        setMode(\"setting\");\r\n    }\r\n\r\n    const add = () => {\r\n        let data = OpenMapData();\r\n        data.WorkRow = {};\r\n        data.ColumnTab.map((column) => {\r\n            data.WorkRow[column] = \"\";\r\n        });\r\n        setMode(\"add\");\r\n    }\r\n\r\n    const renderEditor = () => {\r\n        if (editid != null)\r\n            return;\r\n        if (load)\r\n            return;\r\n        let editDescr = \"Новая запись\";\r\n        if (mode == \"edit\") {\r\n\r\n            let data = OpenMapData();\r\n            let c = data.curRow;\r\n            let row = data.MainTab[c];\r\n            editDescr = row[data.DispField].toString() + \" (редактирование)\";\r\n        }\r\n        if (OpenMapData().EditProc) {\r\n            return (\r\n                <div\r\n                    hidden={!(mode == \"edit\" || mode == \"add\")}\r\n                    className={classes.fixheight}\r\n                >\r\n                    <Editor descr={editDescr} save={save} closeEditor={closeEditor} id={id} mode={mode} />\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    const renderSetting = () => {\r\n        if (filterid == null)\r\n            return;\r\n        if (load)\r\n            return;\r\n        let editDescr = Descr() + \" (параметры)\";\r\n        return (\r\n            <div\r\n                hidden={!(mode == \"setting\")}\r\n                className={classes.fixheight}\r\n            >\r\n                <Editor descr={editDescr} save={saveSetting} closeEditor={closeEditor} id={filterid} mode={mode} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Drawer anchor=\"top\" open={stateDrawer} onClose={toggleDrawer(false)}>\r\n                <Pagination id={id} onChangePage={onChangePage} editid={editid} />\r\n            </Drawer>\r\n            <div\r\n                hidden={!visible}\r\n                className={classes.fixheight}\r\n            >\r\n                <div\r\n                    hidden={mode != \"grid\"}\r\n                    className={classes.fixheight}\r\n                >\r\n                    <AppBar position=\"fixed\">\r\n                        <Toolbar>\r\n                            {(editid == null) ? <Tooltip title=\"Меню\">\r\n                                <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={() => { mainObj.showMenu(); }}>\r\n                                    <MenuIcon />\r\n                                </IconButton>\r\n                            </Tooltip> : \"\"}\r\n                            <Typography variant=\"h6\" className={classes.title}>\r\n                                {Descr()}\r\n                            </Typography>\r\n\r\n                            {renderEditBut()}\r\n                            {(load) ? <span></span> :\r\n                                <React.Fragment>\r\n                                    <IconButton onClick={() => { setMode(\"filter\"); }} className={classes.menuButton}>\r\n                                        <FilterListIcon />\r\n                                    </IconButton>\r\n\r\n                                    <Tooltip title=\"Страницы\" >\r\n                                        <IconButton className={classes.menuButton} onClick={() => { setStateDrawer(true); }}>\r\n                                            <CodeIcon />\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                </React.Fragment>\r\n                            }\r\n                            {renderAddBut()}\r\n                            {addinit()}\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                    <div className={classes.offset} />\r\n                    {(load) ? <span></span> : renderTab()}\r\n                </div>\r\n\r\n                <div\r\n                    hidden={mode != \"filter\"}\r\n                    className={classes.fixheight}\r\n                >\r\n                    <AppBar position=\"fixed\">\r\n                        <Toolbar>\r\n                            <Typography variant=\"h6\" className={classes.title}>\r\n                                {Descr()} (фильтровка и сортировка)\r\n                            </Typography>\r\n\r\n                            <IconButton onClick={() => { setFilter(); }}>\r\n                                <CheckIcon />\r\n                            </IconButton>\r\n\r\n\r\n                            <IconButton onClick={() => { setMode(\"grid\"); }}>\r\n                                <ClearIcon />\r\n                            </IconButton>\r\n\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                    <div className={classes.offset} />\r\n                    {(load) ? <span></span> : renderFilter()}\r\n                </div>\r\n\r\n                {renderEditor()}\r\n                {renderSetting()}\r\n            </div>\r\n        </React.Fragment>);\r\n}\r\n\r\nexport default Finder;","import React, { useState, useEffect } from 'react';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Finder from '../Finder';\r\nimport AttachmentIcon from '@material-ui/icons/Attachment';\r\nimport CommentIcon from '@material-ui/icons/Comment';\r\nimport { baseUrl, openMap, mainObj, prodaction } from '../App';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nfunction Dogovors(props) {\r\n    //let initc = (openMap.get(props.id).data.curRow) ? openMap.get(props.id).data.curRow : 0;\r\n    const classes = useStyles();\r\n    const [current, setCurrent] = useState(-1);\r\n    const [load, setLoad] = useState(true);\r\n    function handleCurrent(r) {\r\n        setCurrent(current + 1);\r\n    }\r\n\r\n    //Достаточно просто вызвать setCurrent, что бы запустить процесс отрисовки\r\n    const filterid = \"dog_filter\";\r\n    const IdDeclare = \"1519\";\r\n    \r\n    useEffect(() => { getData(); }, []);\r\n    async function getData() {\r\n        \r\n\r\n        let mid = {\r\n            Control: null,\r\n            Params: \"1519\",\r\n            SQLParams: {},\r\n            data: {}\r\n          }\r\n        openMap.set(filterid, mid);  \r\n\r\n        const url = baseUrl + \"React/FinderStart\";\r\n        let bd = new FormData();\r\n        bd.append(\"id\", IdDeclare);\r\n\r\n        \r\n        const response = await fetch(url,\r\n            {\r\n                method: 'POST',\r\n                mode: (prodaction) ? 'no-cors' : 'cors',\r\n                cache: 'no-cache',\r\n                credentials: (prodaction) ? 'include' : 'omit',\r\n                //headers: { \"Content-Type\": \"application/json\" },\r\n                body: bd\r\n            }\r\n        );\r\n        const data = await response.json();\r\n        if (data.Error) {\r\n            mainObj.alert(\"Ошибка\", data.Error);\r\n        }\r\n        else\r\n        {\r\n            data.curRow = 0;\r\n            let row = data.MainTab[0];\r\n            data.WorkRow = {};\r\n            data.ColumnTab.map((column) => {\r\n                data.WorkRow[column] = (row[column] == null) ? \"\" : row[column];\r\n            });\r\n\r\n            mid.data = data;\r\n            setLoad(false);\r\n        }\r\n    }\r\n\r\n    function addinit() {\r\n        /*\r\n        if (!openMap.get(props.id).data)\r\n            return;\r\n        if (!openMap.get(props.id).data.MainTab)\r\n            return;\r\n        */\r\n        openMap.get(props.id).data.setCurrent = handleCurrent;\r\n        let c = (openMap.get(props.id).data.curRow != null) ? openMap.get(props.id).data.curRow : 0;\r\n        //let c = current;\r\n        if (c == -1 || c > openMap.get(props.id).data.MainTab.length - 1)\r\n            return;\r\n        let agr_key = openMap.get(props.id).data.MainTab[c][\"agr_key\"].toString();\r\n        let fileUrl = baseUrl + \"Docfiles/dir?id=\" + agr_key + \"/\";\r\n        let messUrl = baseUrl + \"Docfiles/comments?ag_id=\" + agr_key + \"&ag_type=agr\";\r\n        \r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Tooltip title=\"Файлы\">\r\n                    <a href={fileUrl} target=\"_blanck\" className={classes.menuButton}>\r\n                        <AttachmentIcon style={{ color: \"white\" }} />\r\n                    </a>\r\n                </Tooltip>\r\n                <Tooltip title=\"Замечания\">\r\n                    <a href={messUrl} target=\"_blanck\" className={classes.menuButton}>\r\n                        <CommentIcon style={{ color: \"white\" }} />\r\n                    </a>\r\n                </Tooltip>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    return (\r\n        (load)?\"Загрузка...\":<Finder visible={props.visible} params={props.params} id={props.id} key={props.id} addinit={addinit} filterid = {filterid}/>\r\n    );\r\n}\r\n\r\nexport default Dogovors;","import React, { useState, useEffect } from 'react';\n\nimport './App.css';\nimport Comp, { Comp1, GetComp } from './Comp1';\nimport Finder from './Finder';\nimport Dogovors from './ext/Dogovors';\n//import {treeJson} from './MenuDat';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport TreeView from '@material-ui/lab/TreeView';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport TreeItem from '@material-ui/lab/TreeItem';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nfunction dateformat(d, f) {\n  if (!d)\n    return d;\n\n\n  if (d.length != 24) {\n    let re = new RegExp('0\\.(0?)');\n    let res = f.match(/0\\.(0+)/);\n\n    let n = 0;\n    if (res)\n      if (res.length > 1) {\n        n = res[1].length;\n      }\n\n\n    if (n > 0)\n      return Number(d.toString()).toFixed(n);\n    else\n      return d;\n\n\n\n  }\n  f = f.replace('yyyy', d.substr(0, 4));\n  f = f.replace('yy', d.substr(2, 2));\n  f = f.replace('MM', d.substr(5, 2));\n  f = f.replace('dd', d.substr(8, 2));\n  f = f.replace('HH', d.substr(11, 2));\n  f = f.replace('mm', d.substr(14, 2));\n  return f;\n}\n\nlet treeJson = [];\nlet mainObj = {};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    marginRight: 20,\n    marginLeft: 5\n\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n}));\n\nconst prodaction = true;\nconst baseUrl = (prodaction) ? \"\" : \"http://127.0.0.1:5000/\";\n\nlet menuMap = new Map();\nfunction createMenuMap(tree) {\n  tree.map((node) => {\n    if (node.children == null)\n      menuMap.set(node.id, node.attributes);\n    else\n      createMenuMap(node.children);\n  });\n}\n\nlet openMap = new Map();\n\nlet startObj = {\n  Control: Dogovors,\n  Params: \"1445\",\n  SQLParams: {},\n  data: {}\n}\nopenMap.set(\"839\", startObj);\n\n\nlet openIDs = [];\nopenIDs.push(\"839\");\n\n\n//===========================================Application================================\nfunction App(props) {\n  const classes = useStyles();\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? 'dark' : 'light',\n        },\n      }),\n    [prefersDarkMode],\n  );\n  const [loading, setLoading] = useState(true);\n  const [current, Setcurrent] = useState(\"839\");\n  const [stateDrawer, setStateDrawer] = useState(false);\n  const [openAlert, setOpenAlert] = React.useState(false);\n\n  useEffect(() => { getTree(); }, []);\n\n  function show() {\n    setStateDrawer(true);\n  }\n\n  function getForm(id) {\n    let p = menuMap.get(id);\n    let control = (p.params) ? Finder : Comp1;\n    let params = p.params;\n    let SQLParams = null; //new Map();\n    if (p.link1 == \"RegulationPrint.repSDM\") {\n      SQLParams = {\n        \"@DateStart\": \"2000-01-01\",\n        \"@DateFinish\": \"2099-01-01\"\n      };\n\n    }\n\n    if (p.link1 == \"RegulationPrint.ServiceReport\") {\n      SQLParams = {\n        \"@DateStart\": \"2000-01-01\",\n        \"@DateFinish\": \"2099-01-01\",\n        \"@AL_UTG\": \"<Все>\"\n      };\n\n    }\n\n    return {\n      Conrol: control,\n      Params: params,\n      SQLParams: SQLParams\n    }\n  }\n\n  function open(id) {\n    if (openMap.get(id) == null) {\n      let c = getForm(id);\n      let obj = {\n        Control: c.Conrol,\n        Params: c.Params,\n        SQLParams: c.SQLParams,\n        data: {}\n      }\n      openMap.set(id, obj);\n      openIDs.push(id);\n    }\n    Setcurrent(id);\n  }\n\n  function addform(id, obj) {\n    if (openMap.get(id) == null) {\n      openMap.set(id, obj);\n      openIDs.push(id);\n    }\n    Setcurrent(id);\n  }\n\n  async function getTree() {\n\n    const url = baseUrl + \"ustore/gettree\";\n    const response = await fetch(url,\n      {\n        method: 'POST', // *GET, POST, PUT, DELETE, etc.\n        mode: (prodaction) ? 'no-cors' : 'cors', // no-cors, *cors, same-origin\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n        credentials: (prodaction) ? 'include' : 'omit' // include, *same-origin, omit\n      }\n    );\n\n    const data = await response.json();\n    treeJson = data;\n    menuMap.clear();\n    createMenuMap(treeJson);\n    setLoading(false);\n\n  }\n\n\n  const handleSelect = (event, nodeIds) => {\n    if (menuMap.get(nodeIds)) {\n      setStateDrawer(false);\n      open(nodeIds);\n    }\n  };\n\n  const renderTree = (nodes) => (\n    <TreeItem key={nodes.id} nodeId={nodes.id} label={nodes.text}>\n      {Array.isArray(nodes.children) ? nodes.children.map((node) => renderTree(node)) : null}\n    </TreeItem>\n  );\n\n  function rendItem(id) {\n    let value = openMap.get(id);\n    let Cm = value.Control;\n    return <Cm visible={(current == id)} params={value.Params} id={id} key={id} />\n  }\n  const handleClose = () => {\n    setOpenAlert(false);\n    if (mainObj.alertConfirm)\n      mainObj.confirmAction();\n  };\n\n  const showAlert = (title, text) => {\n    mainObj.alertConfirm = false;\n    mainObj.alertTitle = title;\n    mainObj.alertText = text;\n    setOpenAlert(true);\n  }\n\n  const showConfirm = (title, text, action) => {\n    mainObj.alertConfirm = true;\n    mainObj.alertTitle = title;\n    mainObj.alertText = text;\n    mainObj.confirmAction = action;\n    setOpenAlert(true);\n  }\n\n  //Передаем фунцию через глобальный объект\n  mainObj.showMenu = show;\n  mainObj.addform = addform;\n  mainObj.alert = showAlert; \n  mainObj.confirm = showConfirm; \n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n\n      <React.Fragment>\n        <Drawer anchor=\"left\" open={stateDrawer} variant=\"persistent\">\n          <div className={classes.drawerHeader}>\n            <IconButton onClick={(event) => { setStateDrawer(false); }}>\n              <ChevronLeftIcon />\n            </IconButton>\n          </div>\n\n          {\n            (loading) ? <p><em>Загрузка...</em></p> :\n              <TreeView\n                className={classes.root}\n                defaultCollapseIcon={<ExpandMoreIcon />}\n                defaultExpandIcon={<ChevronRightIcon />}\n                onNodeSelect={handleSelect}\n              >\n                {\n                  treeJson.map((node) => renderTree(node))\n                }\n              </TreeView>\n          }\n        </Drawer>\n        <Dialog\n          open={openAlert}\n          keepMounted\n          onClose={()=>{setOpenAlert(false);}}\n          aria-labelledby=\"alert-dialog-slide-title\"\n          aria-describedby=\"alert-dialog-slide-description\"\n        >\n          <DialogTitle id=\"alert-dialog-slide-title\">{mainObj.alertTitle}</DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-slide-description\">\n              {mainObj.alertText}\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleClose} color=\"primary\">\n              ОК\n          </Button>\n          { (mainObj.alertConfirm)?\n            <Button onClick={()=>{setOpenAlert(false);}} color=\"primary\">\n            Отмена\n           </Button>:\"\"\n          }\n          </DialogActions>\n        </Dialog>\n\n\n        {\n          openIDs.map((id) => (\n            rendItem(id)\n          ))\n        }\n      </React.Fragment>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\nexport { baseUrl, openMap, mainObj, prodaction, dateformat };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//import { Router } from \"react-router-dom\"\n//import {createBrowserHistory} from 'history'\n\n//const history = createBrowserHistory()\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}